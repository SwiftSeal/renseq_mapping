import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

configfile: "config/config.yaml"

def get_reference():
    return config["reference"]["fasta"]

def get_reads(wildcards):
    R1 = config[wildcards.source][wildcards.phenotype]["R1"]
    R2 = config[wildcards.source][wildcards.phenotype]["R2"]
    return R1, R2

rule all:
    input:
        expand("results/filtered/{source}.vcf", source = ["parent", "bulk"]),
        expand("results/plots/{source}.png", source = ["parent", "bulk"])

rule get_reference:
    input:
        fasta = get_reference()
    output:
        "results/reference/reference.fasta"
    shell:
        """
        cp {input.fasta} {output}
        """

rule bowtie2_index:
    input:
        fasta = "results/reference/reference.fasta"
    output:
        "results/reference/reference.1.bt2"
    conda:
        "envs/bowtie2.yaml"
    shell:
        """
        bowtie2-build {input.fasta} results/reference/reference
        """

rule bowtie2_align:
    input:
        R1 = lambda wildcards: get_reads(wildcards)[0],
        R2 = lambda wildcards: get_reads(wildcards)[1],
        index = "results/reference/reference.1.bt2"
    output:
        bam = "results/bowtie2_align/{source}.{phenotype}.bam"
    params:
        config["bowtie2_args"]
    conda:
        "envs/bowtie2.yaml"
    threads:
        16
    resources:
        mem_mb = 4000,
        partition = "short"
    shell:
        """
        bowtie2 -p {threads} {params} -x results/reference/reference -1 {input.R1} -2 {input.R2} | samtools view -bS - > {output}
        """

rule sort_bam:
    input:
        "results/bowtie2_align/{source}.{phenotype}.bam"
    output:
        "results/bowtie2_align/{source}.{phenotype}.sorted.bam"
    conda:
        "envs/bowtie2.yaml"
    shell:
        """
        samtools sort -o {output} {input}
        """

rule mpileup:
    input:
        resistant = "results/bowtie2_align/{source}.resistant.sorted.bam",
        susceptible = "results/bowtie2_align/{source}.susceptible.sorted.bam",
        reference = "results/reference/reference.fasta"
    output:
        "results/mpileup/{source}.mpileup"
    conda:
        "envs/bowtie2.yaml"
    shell:
        """
        samtools mpileup -f {input.reference} {input.resistant} {input.susceptible} > {output}
        """

rule varscan:
    input:
        "results/mpileup/{source}.mpileup"
    output:
        "results/varscan/{source}.vcf"
    conda:
        "envs/bowtie2.yaml"
    shell:
        """
        varscan mpileup2snp {input} --output-vcf 1 --strand-filter 0 > {output}
        """

rule plot_variants_frequency:
    input:
        "results/varscan/{source}.vcf"
    output:
        report("results/plots/{source}.png")
    run:
        with open(input[0]) as infile:
            source = []
            frequency = []
            for line in infile:
                # ignore header lines
                if line.startswith("#"):
                    pass
                else:
                    fields = line.split("\t")
                    keys = fields[8].split(":")
                    resistant = fields[9].split(":")
                    susceptible = fields[10].split(":")
                    
                    # error and warn user if operating on wrong field
                    if keys[6] != "FREQ":
                        raise ValueError("Expected FREQ field at position 7, got {} instead".format(keys[6]))
                    
                    # convert freq to float
                    resistant_freq = float(resistant[6].rstrip("%"))
                    susceptible_freq = float(susceptible[6].rstrip("%"))

                    # add to dataframe
                    source.append("resistant")
                    frequency.append(resistant_freq)
                    source.append("susceptible")
                    frequency.append(susceptible_freq)

            # create dataframe
            df = pd.DataFrame({"source": source, "frequency": frequency})
            
            # plot
            sns.displot(df, x = "frequency", hue = "source", kind = "kde")
            plt.savefig(output[0])
    
rule filter_variants:
    input:
        "results/varscan/{source}.vcf"
    output:
        "results/filtered/{source}.vcf"
    params:
        susceptible_min = config["allele_frequency"]["susceptible"]["min"],
        susceptible_max = config["allele_frequency"]["susceptible"]["max"],
        resistant_min = config["allele_frequency"]["resistant"]["min"],
        resistant_max = config["allele_frequency"]["resistant"]["max"]
    run:
        with open(input[0]) as infile, open(output[0], "w") as outfile:
            for line in infile:
                # ignore header lines
                if line.startswith("#"):
                    outfile.write(line)
                else:
                    fields = line.split("\t")
                    keys = fields[8].split(":")
                    resistant = fields[9].split(":")
                    susceptible = fields[10].split(":")

                    # error and warn user if operating on wrong field
                    if keys[6] != "FREQ":
                        raise ValueError("Expected FREQ field at position 7, got {} instead".format(keys[6]))
                    
                    # convert freq to float
                    resistant_freq = float(resistant[6].rstrip("%"))
                    susceptible_freq = float(susceptible[6].rstrip("%"))

                    # write out if freq is within bounds
                    if params.susceptible_min <= susceptible_freq <= params.susceptible_max and params.resistant_min <= resistant_freq <= params.resistant_max:
                        outfile.write(line)
                    elif 100 - params.susceptible_max <= susceptible_freq <= 100 - params.susceptible_min and 100 - params.resistant_max <= resistant_freq <= 100 - params.resistant_min:
                        outfile.write(line)
                    else:
                        pass
                    