import pandas as pd

configfile: "config/config.yaml"

def get_reference():
    return config["reference"]["fasta"]

def get_reads(wildcards):
    R1 = config[wildcards.source][wildcards.phenotype]["R1"]
    R2 = config[wildcards.source][wildcards.phenotype]["R2"]
    return R1, R2

rule all:
    input:
        expand("results/varscan/{source}.vcf", source = ["parent", "bulk"])


rule bowtie2_index:
    input:
        fasta = get_reference()
    output:
        "results/bowtie2_index/reference.1.bt2"
    conda:
        "envs/bowtie2.yaml"
    shell:
        """
        bowtie2-build {input.fasta} results/bowtie2_index/reference
        """

rule bowtie2_align:
    input:
        R1 = lambda wildcards: get_reads(wildcards)[0],
        R2 = lambda wildcards: get_reads(wildcards)[1],
        index = "results/bowtie2_index/reference.1.bt2"
    output:
        bam = temp("results/bowtie2_align/{source}.{phenotype}.bam")
    params:
        config["bowtie2_args"]
    conda:
        "envs/bowtie2.yaml"
    threads:
        16
    resources:
        mem_mb = 16000
    shell:
        """
        bowtie2 -p {threads} {params} -x results/bowtie2_index/ -1 {input.R1} -2 {input.R2} | samtools view -bS - > {output}
        """

rule mpileup:
    input:
        "results/bowtie2_align/{source}.resistant.bam",
        "results/bowtie2_align/{source}.susceptible.bam"
    output:
        temp("results/mpileup/{source}.mpileup")
    params:
        reference = get_reference()
    conda:
        "envs/bowtie2.yaml"
    shell:
        """
        samtools mpileup -f {params.reference} {input} > {output}
        """

rule varscan:
    input:
        "results/mpileup/{source}.mpileup"
    output:
        "results/varscan/{source}.vcf"
    conda:
        "envs/bowtie2.yaml"
    shell:
        """
        varscan mpileup2snp {input} --output-vcf 1 --strand-filter 0 > {output}
        """
    
rule filter:
    input:
        "results/varscan/{source}.vcf"
    output:
        "results/varscan/{source}.filtered.vcf"
    run:
        with open(input[0]) as infile, open(output[0], "w") as outfile:
            for line in infile:
                if line.startswith("#"):
                    outfile.write(line)
                else:
                    fields = line.split("\t")
                    if fields[6] == "PASS":
                        outfile.write(line)
